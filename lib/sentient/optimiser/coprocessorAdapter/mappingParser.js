"use strict";

// This parser reads undo.map files generated by the Riss coprocessor. All of
// the mappings can be derived from the second line in the file. Here is a brief
// explanation of how the mappings work.
//
// To begin with, it is important to note that the number at index N relates to
// literal N-1 in the original (unsimplified) DIMACS file. If the number is '1',
// it means that the literal didn't appear in the original problem. For example,
// the string '2 4 5 1 0' refers to literals 1, 3 and 4, respectively. The '0'
// is simply a terminal symbol, used for parsing.
//
// To figure out the mappings for each literal, you need only count the index of
// the number on that line and add one. For the same example of '2 4 5 1 0',
// here are the mappings:
//
// original => simplified
// ----------------------
//    1     =>     1
//    3     =>     2
//    4     =>     3
//
// In cases where a literal in the original problem maps onto the same literal
// in the simplified problem, those mappings are excluded from the result.

var MappingParser = function (mappings) {
  var self = this;

  self.parse = function () {
    var lines = mappings.split("\n");
    var secondLine = lines[1];

    if (typeof secondLine === "undefined") {
      return {};
    } else {
      secondLine = secondLine.trim();
    }

    var numbers = secondLine.split(" ");
    var lookup = {};

    for (var i = 0; i < numbers.length; i += 1) {
      var n = parseInt(numbers[i], 10);

      if (n <= 1) {
        break;
      }

      var originalLiteral = n - 1;
      var simplifiedLiteral = i + 1;

      if (originalLiteral !== simplifiedLiteral) {
        lookup[originalLiteral] = simplifiedLiteral;
      }
    }

    return lookup;
  };
};

MappingParser.parse = function (mappings) {
  return new MappingParser(mappings).parse();
};

module.exports = MappingParser;
