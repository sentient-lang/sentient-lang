module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { program: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(lines) {
              return lines;
            },
          function(statement) {
              return statement;
            },
          function(s) {
              return { type: "declaration", value: s };
            },
          function(s) {
              return { type: "assignment", value: s };
            },
          function(s) {
              return { type: "expose", value: s };
            },
          function(s) {
              return { type: "invariant", value: s };
            },
          function(s) {
              return { type: "function", value: s };
            },
          function(s) {
              return { type: "functionExpression", value: s };
            },
          function(type, variableList) {
              return [type, variableList];
            },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(variableList, exprList) {
              return [variableList, exprList];
            },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(variable, operator, expr) {
              return [[variable], [[operator, variable, expr]]];
            },
          "expose",
          { type: "literal", value: "expose", description: "\"expose\"" },
          function(variableList) {
              return variableList;
            },
          "invariant",
          { type: "literal", value: "invariant", description: "\"invariant\"" },
          function(expressionList) {
              return expressionList;
            },
          function(signature, body) {
              return {
                name: signature[0],
                dynamic: signature[1],
                immutable: signature[2],
                args: signature[3],
                body: body[0],
                ret: body[1]
              };
            },
          "function",
          { type: "literal", value: "function", description: "\"function\"" },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(dynamic, methodName, args) {
              dynamic = dynamic === "^";
              methodName = methodName || [];

              var name = methodName[0] || "_anonymous";
              var immutable = methodName[1] === "&";

              return [name, dynamic, immutable, args || []];
            },
          "&",
          { type: "literal", value: "&", description: "\"&\"" },
          function(name, immutable) {
              return [name, immutable];
            },
          function(head, tail) {
              if (tail) {
                return [head].concat(tail);
              } else {
                return [head];
              }
            },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(tail) {
              return tail;
            },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(body, returnStatement) {
              return [body, returnStatement || [0]];
            },
          "return",
          { type: "literal", value: "return", description: "\"return\"" },
          function(returnList) {
              return returnList || [0];
            },
          function(width, expressionList) {
              var exprWidth = expressionList.length;

              if (width && exprWidth > width) {
                var message = "'return" + width + "' was specified, but the function"
                message += " returns (at least) " + exprWidth + " expressions"
                throw new Error(message);
              }

              width = width || exprWidth;
              expressionList.unshift(width);
              return expressionList;
            },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[a-zA-Z0-9_]/,
          { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
          function(name) {
              return name;
            },
          "bool",
          { type: "literal", value: "bool", description: "\"bool\"" },
          "int",
          { type: "literal", value: "int", description: "\"int\"" },
          "array",
          { type: "literal", value: "array", description: "\"array\"" },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          "[]",
          { type: "literal", value: "[]", description: "\"[]\"" },
          "-@",
          { type: "literal", value: "-@", description: "\"-@\"" },
          "!@",
          { type: "literal", value: "!@", description: "\"!@\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          /^[+\-*\/%<>]/,
          { type: "class", value: "[+\\-*/%<>]", description: "[+\\-*/%<>]" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() {
              return true;
            },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() {
              return false;
            },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function() {
              return parseInt(text(), 10);
            },
          function() {
              return ["bool"];
            },
          function(width) {
              if (width) {
                return ["int", width];
              } else {
                return ["int"];
              }
            },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          function(width, subtype) {
              return ["array", width].concat(subtype);
            },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(c, ifTrue, ifFalse) {
              return ["if", c, ifTrue, ifFalse];
            },
          function(head, tail) {
              return leftAssociative(head, tail);
            },
          function(operator, expr) {
              return { expr: [expr], operator: operator };
            },
          function(left, operator, right) {
              return [operator, left, right];
            },
          function(expr) {
              return ["!@", expr];
            },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(methodName, methodArgs) {
              methodArgs = methodArgs || [];
              return { expr: methodArgs, operator: methodName };
            },
          function(callList) {
              return callList;
            },
          function(expr) {
              return ["-@", expr];
            },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(arg) {
              return { expr: [arg], operator: "[]" };
            },
          function(expr) {
              return expr;
            },
          function(exprList) {
              exprList = exprList || [];
              exprList.unshift("buildArray");

              return exprList;
            },
          function(methodName, callList) {
              callList = callList || [];
              callList.unshift(methodName);
              return callList;
            },
          /^[ \t\r\n]/,
          { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },
          function() {
              return " ";
            },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          /^[^\r\n]/,
          { type: "class", value: "[^\\r\\n]", description: "[^\\r\\n]" },
          function() {
              return "";
            }
        ],

        peg$bytecode = [
          peg$decode("%$;Y.) &2 \"\"6 7!0/*;Y.) &2 \"\"6 7!&/8#$;!0#*;!&/($8\":\"\"! )(\"'#&'#"),
          peg$decode("%;\"/m#;Y.\" &\"/_$2 \"\"6 7!/P$$;Y.) &2 \"\"6 7!0/*;Y.) &2 \"\"6 7!&/($8$:#$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%;#/' 8!:$!! ).\x8F &%;$.# &;%/' 8!:%!! ).w &%;&/' 8!:&!! ).e &%;'/' 8!:'!! ).S &%;(/' 8!:(!! ).A &%;U/' 8!:)!! )./ &%;M/' 8!:)!! )"),
          peg$decode("%;8/;#;Y/2$;1/)$8#:*#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;1/]#;Y.\" &\"/O$2+\"\"6+7,/@$;Y.\" &\"/2$;=/)$8%:-%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;3/\xB5#;Y.\" &\"/\xA7$2.\"\"6.7/.e &20\"\"6071.Y &22\"\"6273.M &24\"\"6475.A &26\"\"6677.5 &28\"\"6879.) &2:\"\"6:7;/P$2+\"\"6+7,/A$;Y.\" &\"/3$;?/*$8&:<&#%# )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2=\"\"6=7>/:#;Y/1$;1/($8#:?#! )(#'#(\"'#&'#"),
          peg$decode("%2@\"\"6@7A/:#;Y/1$;=/($8#:B#! )(#'#(\"'#&'#"),
          peg$decode("%;)/@#;Y.\" &\"/2$;./)$8#:C#\"\" )(#'#(\"'#&'#"),
          peg$decode("%2D\"\"6D7E/\xA2#2F\"\"6F7G.\" &\"/\x8E$;*.\" &\"/\x80$;Y.\" &\"/r$2H\"\"6H7I/c$;Y.\" &\"/U$;+.\" &\"/G$;Y.\" &\"/9$2J\"\"6J7K/*$8):L)#'&\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;Y/F#;5/=$2M\"\"6M7N.\" &\"/)$8#:O#\"! )(#'#(\"'#&'#"),
          peg$decode("%;-/7#;,.\" &\"/)$8\":P\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/N#2Q\"\"6Q7R/?$;Y.\" &\"/1$;+/($8$:S$! )($'#(#'#(\"'#&'#"),
          peg$decode(";3.C &%%22\"\"6273/,#;5/#$+\")(\"'#&'#/\"!&,)"),
          peg$decode("%2T\"\"6T7U/O#; /F$;/.\" &\"/8$2V\"\"6V7W/)$8$:X$\"\"!)($'#(#'#(\"'#&'#"),
          peg$decode("%2Y\"\"6Y7Z/{#;0.\" &\"/m$;Y.\" &\"/_$2 \"\"6 7!/P$$;Y.) &2 \"\"6 7!0/*;Y.) &2 \"\"6 7!&/($8%:[%!#)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;;.\" &\"/;#;Y/2$;=/)$8#:\\#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;3/7#;2.\" &\"/)$8\":P\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/N#2Q\"\"6Q7R/?$;Y.\" &\"/1$;1/($8$:S$! )($'#(#'#(\"'#&'#"),
          peg$decode("%%<;4=.##&&!&'#/d#%%4]\"\"5!7^/?#$4_\"\"5!7`0)*4_\"\"5!7`&/#$+\")(\"'#&'#/\"!&,)/($8\":a\"! )(\"'#&'#"),
          peg$decode(";7.q &2=\"\"6=7>.e &2@\"\"6@7A.Y &2D\"\"6D7E.M &2Y\"\"6Y7Z.A &2b\"\"6b7c.5 &2d\"\"6d7e.) &2f\"\"6f7g"),
          peg$decode("%%;3/C#2h\"\"6h7i.) &2j\"\"6j7k.\" &\"/#$+\")(\"'#&'#/\"!&,).# &;6"),
          peg$decode("2l\"\"6l7m.\x89 &2n\"\"6n7o.} &2p\"\"6p7q.q &2r\"\"6r7s.e &2t\"\"6t7u.Y &2v\"\"6v7w.M &2x\"\"6x7y.A &28\"\"6879.5 &2:\"\"6:7;.) &4z\"\"5!7{"),
          peg$decode("%2|\"\"6|7}/B#%<4_\"\"5!7`=.##&&!&'#/'$8\":~\" )(\"'#&'#.| &%2\"\"67\x80/B#%<4_\"\"5!7`=.##&&!&'#/'$8\":\x81\" )(\"'#&'#.G &%$4\x82\"\"5!7\x83/,#0)*4\x82\"\"5!7\x83&&&#/& 8!:\x84! )"),
          peg$decode(";9.) &;:.# &;<"),
          peg$decode("%2b\"\"6b7c/& 8!:\x85! )"),
          peg$decode("%2d\"\"6d7e/6#;;.\" &\"/($8\":\x86\"! )(\"'#&'#"),
          peg$decode("%4\x87\"\"5!7\x88/C#$4\x82\"\"5!7\x830)*4\x82\"\"5!7\x83&/'$8\":\x84\" )(\"'#&'#"),
          peg$decode("%2f\"\"6f7g/Y#;;/P$2\x89\"\"6\x897\x8A/A$;8/8$2\x8B\"\"6\x8B7\x8C/)$8%:\x8D%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;?/7#;>.\" &\"/)$8\":P\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/N#2Q\"\"6Q7R/?$;Y.\" &\"/1$;=/($8$:S$! )($'#(#'#(\"'#&'#"),
          peg$decode("%;@/\x92#;Y.\" &\"/\x84$2h\"\"6h7i/u$;Y.\" &\"/g$;?/^$;Y.\" &\"/P$2\x8E\"\"6\x8E7\x8F/A$;Y.\" &\"/3$;?/*$8):\x90)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;@"),
          peg$decode("%;B/9#$;A0#*;A&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/O#2:\"\"6:7;/@$;Y.\" &\"/2$;B/)$8$:\x92$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;D/9#$;C0#*;C&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/O#28\"\"6879/@$;Y.\" &\"/2$;D/)$8$:\x92$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;F/9#$;E0#*;E&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/[#2v\"\"6v7w.) &2x\"\"6x7y/@$;Y.\" &\"/2$;F/)$8$:\x92$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;G/\x82#;Y.\" &\"/t$2r\"\"6r7s.A &2t\"\"6t7u.5 &2\x89\"\"6\x897\x8A.) &2\x8B\"\"6\x8B7\x8C/A$;Y.\" &\"/3$;G/*$8%:\x93%#$\" )(%'#($'#(#'#(\"'#&'#.# &;G"),
          peg$decode("%;I/9#$;H0#*;H&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/[#2.\"\"6.7/.) &20\"\"6071/@$;Y.\" &\"/2$;I/)$8$:\x92$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;K/9#$;J0#*;J&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/g#22\"\"6273.5 &24\"\"6475.) &26\"\"6677/@$;Y.\" &\"/2$;K/)$8$:\x92$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%2j\"\"6j7k/1#;L/($8\":\x94\"! )(\"'#&'#.# &;L"),
          peg$decode(";M.# &;P"),
          peg$decode("%;P/?#$;N/&#0#*;N&&&#/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%2\x95\"\"6\x957\x96/@#;5/7$;O.\" &\"/)$8#:\x97#\"! )(#'#(\"'#&'#.# &;R"),
          peg$decode("%2H\"\"6H7I/a#;Y.\" &\"/S$;V.\" &\"/E$;Y.\" &\"/7$2J\"\"6J7K/($8%:\x98%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%20\"\"6071/1#;Q/($8\":\x99\"! )(\"'#&'#.# &;Q"),
          peg$decode("%;S/9#$;R0#*;R&/)$8\":\x91\"\"! )(\"'#&'#"),
          peg$decode("%2\x9A\"\"6\x9A7\x9B/\\#;Y.\" &\"/N$;?/E$;Y.\" &\"/7$2\x9C\"\"6\x9C7\x9D/($8%:\x9E%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";U.~ &;T.x &;7.r &;3.l &%2H\"\"6H7I/\\#;Y.\" &\"/N$;?/E$;Y.\" &\"/7$2J\"\"6J7K/($8%:\x9F%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\x9A\"\"6\x9A7\x9B/a#;Y.\" &\"/S$;=.\" &\"/E$;Y.\" &\"/7$2\x9C\"\"6\x9C7\x9D/($8%:\xA0%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;5/q#2H\"\"6H7I/b$;Y.\" &\"/T$;V.\" &\"/F$;Y.\" &\"/8$2J\"\"6J7K/)$8&:\xA1&\"%\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;X/7#;W.\" &\"/)$8\":P\"\"! )(\"'#&'#"),
          peg$decode("%;Y.\" &\"/N#2Q\"\"6Q7R/?$;Y.\" &\"/1$;V/($8$:S$! )($'#(#'#(\"'#&'#"),
          peg$decode(";(.I &;?.C &%%22\"\"6273/,#;5/#$+\")(\"'#&'#/\"!&,)"),
          peg$decode("%$4\xA2\"\"5!7\xA3.# &;Z/2#0/*4\xA2\"\"5!7\xA3.# &;Z&&&#/& 8!:\xA4! )"),
          peg$decode("%2\xA5\"\"6\xA57\xA6/C#$4\xA7\"\"5!7\xA80)*4\xA7\"\"5!7\xA8&/'$8\":\xA9\" )(\"'#&'#")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      var leftAssociative = function (head, tail) {
        return tail.reduce(function (acc, element) {
          return [element.operator, acc].concat(element.expr);
        }, head);
      };


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
