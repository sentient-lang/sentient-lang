"use strict";

var Explanation = function () {
  var self = this;

  self.print = function () {
    console.log("  Explanation:");
    console.log();
    console.log("  --compile");
    console.log();
    console.log("  The 'compile' option changes the output to be compiled");
    console.log("  machine code rather than the result of running the");
    console.log("  program. This machine code can then be run later by using");
    console.log("  the 'run' option.");
    console.log();
    console.log("  It is useful to pre-compile a program when you intend to");
    console.log("  repeatedly run it with different sets of assignments. For");
    console.log("  example, you might write a program that solves knapsack,");
    console.log("  then repeatedly run it with different constraints.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --compile");
    console.log();
    console.log("  --optimise");
    console.log();
    console.log("  This 'optimise' option switches on machine code");
    console.log("  optimisation which attempts to minimise the resulting SAT");
    console.log("  problem before it is fed to the machine for solving. In");
    console.log("  order to use optimisation, you will need to have installed");
    console.log("  the 'Riss Coprocessor' executable.");
    console.log();
    console.log("  It is possible to optimise programs independently of their");
    console.log("  compilation. The optimiser reads machine code and writes");
    console.log("  optimised machine code to standard output.");
    console.log();
    console.log("  It is not recommended to use optimisation unless the");
    console.log("  program is intended to be run multiple times or separately");
    console.log("  in a web browser. Often, optimisation can take longer than");
    console.log("  compiling and running a program if it is only run once.");
    console.log();
    console.log("    $ sentient --optimise");
    console.log();
    console.log("  --run");
    console.log();
    console.log("  The 'run' option is used to run a pre-compiled program.");
    console.log("  rather than running the program from source. This is");
    console.log("  the recommended way to run programs as it means that much");
    console.log("  of the work in interpreting and optimising programs has");
    console.log("  already been completed by the compilation stage.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --run");
    console.log();
    console.log("  --assign");
    console.log();
    console.log("  The 'assign' option is used to assign values to variables");
    console.log("  within a Sentient program. Any variable that appears in");
    console.log("  an 'expose' statement will be assignable. Assignments");
    console.log("  impose additional constraints on the program when it runs.");
    console.log();
    console.log("  A set of assignments must be a valid JSON object. Each");
    console.log("  variable to be assigned should appear as a key of this");
    console.log("  object. Values can be booleans, integers or arrays.");
    console.log();
    console.log("  Arrays support additional syntax that allows some of its");
    console.log("  elements to be set, whilst leaving others unset. You can");
    console.log("  either mark elements as 'undefined' or set elements by");
    console.log("  array index. The last two examples below are equivalent.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --assign '{ a: true, b: 123, c: -50 }'");
    console.log("    $ sentient --assign '{ foo: [1, 2, 3] }'");
    console.log("    $ sentient --assign '{ foo: [undefined, 2] }'");
    console.log("    $ sentient --assign '{ foo: { 1: 2 } }'");
    console.log();
    console.log("  --assign-file");
    console.log();
    console.log("  The 'assign-file' option works in the same way as 'assign'");
    console.log("  except it reads its assignments from a file. This is");
    console.log("  useful when assigning on command-line becomes unwieldy.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --assign-file assignments.json");
    console.log();
    console.log("  --number");
    console.log();
    console.log("  The 'number' option specifies how many solutions should be");
    console.log("  returned. By default, this value is 1. If a value of 0 is");
    console.log("  specified, Sentient will continue to search for solutions.");
    console.log();
    console.log("  It is possible that all solutions are found before the");
    console.log("  specified number is reached. In this case, an empty object");
    console.log("  will be returned and Sentient will terminate.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --number 5");
    console.log("    $ sentient --number 0");
    console.log();
    console.log("  --machine");
    console.log();
    console.log("  The 'machine' option specifies which SAT solver is used to");
    console.log("  run programs. Having the ability to swap out the solver");
    console.log("  allows programs to be run on different platforms.");
    console.log();
    console.log("  By default, the 'minisat' adapter is used, which is a");
    console.log("  version of MiniSat that has been compiled into JavaScript");
    console.log("  with Emscripten. Currently, Sentient supports two other");
    console.log("  adapters: 'lingeling' and 'riss'. These are usually faster");
    console.log("  but must be installed before they can be used.");
    console.log();
    console.log("  Examples:");
    console.log();
    console.log("    $ sentient --machine lingeling");
    console.log("    $ sentient --machine riss");
    console.log();
  };
};

Explanation.print = function () {
  new Explanation().print();
};

module.exports = Explanation;
